// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  userName          String
  email             String @unique
  createdAt         DateTime @default(now())
  hashedPassword    String
  administrator     Boolean
  teacher           Boolean
  student           Boolean
  deletedAt         DateTime?
  taughtCourses     CourseSemester[]
  taughtGroups      SeminarGroup[]
  studiedCourses    CourseStudent[]
  studiedGroups     GroupStudent[]
  guarantedCourses  Course[]
}

model Course {
  id                String @id
  description       String
  name              String
  deletedAt         DateTime?
  guarantor         User @relation(fields: [guarantorId], references: [id])
  guarantorId       Int
  faculty           Faculty @relation(fields: [facultyId], references: [id])
  facultyId         String
  credits           Int
  courseSemesters   CourseSemester[]
}

model SeminarGroup {
  id                String @id @default(uuid())
  registrationStart DateTime
  registrationEnd   DateTime
  capacity          Int
  deletedAt         DateTime?
  courseSemester    CourseSemester @relation(fields: [courseSemesterId], references: [id])
  courseSemesterId  String
  teachers          User[]
  students          GroupStudent[]
  groupNumber       Int
  timeSlot          TimeSlot @relation(fields: [timeSlotId], references: [id])
  timeSlotId        String @unique
  room              String
}

model Faculty {
  id        String @id @default(uuid())
  name      String
  deletedAt DateTime?
  courses   Course[]
}

model Semester {
  id              String @id @default(uuid())
  year            Int
  season          SemesterSeason
  semesterStart   DateTime
  semesterEnd     DateTime
  deletedAt       DateTime?
  courseSemesters CourseSemester[]
}

model CourseStudent {
    id        String @id @default(uuid())
    deletedAt DateTime?
    student   User @relation(fields: [studentId], references: [id])
    studentId Int
    course    CourseSemester @relation(fields: [courseId], references: [id])
    courseId  String
}

model GroupStudent {
    id        String @id @default(uuid())
    deletedAt DateTime?
    student   User @relation(fields: [studentId], references: [id])
    studentId Int
    group     SeminarGroup @relation(fields: [groupId], references: [id])
    groupId   String
}

model CourseSemester {
    id                String @id @default(uuid())
    registrationStart DateTime
    registrationEnd   DateTime
    capacity          Int
    teachers          User[]
    students          CourseStudent[]
    deletedAt         DateTime?
    course            Course @relation(fields: [courseId], references: [id])
    courseId          String
    semester          Semester @relation(fields: [semesterId], references: [id])
    semesterId        String
    seminarGroups     SeminarGroup[]
    timeSlot          TimeSlot? @relation(fields: [timeSlotId], references: [id])
    timeSlotId        String? @unique
    room              String?
}

model TimeSlot {
    id           String @id @default(uuid())
    day          Day
    startHour    Int
    startMinute  Int
    endHour      Int
    endMinute    Int
    seminarGroup SeminarGroup?
    course       CourseSemester?

}

enum Day {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum SemesterSeason {
  SPRING
  FALL
}